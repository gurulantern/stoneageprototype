//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""4dd88877-f6ee-437e-883c-acc98ce723e5"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5b22dc57-f197-44d2-adee-558714ba700b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sleep"",
                    ""type"": ""Button"",
                    ""id"": ""0aac306d-e381-4437-b672-d48fa61a2eef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact Action"",
                    ""type"": ""Button"",
                    ""id"": ""4b6b990f-7c76-4f51-b6f4-3781b9c760e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Observe"",
                    ""type"": ""Button"",
                    ""id"": ""698e477e-9b06-40ba-9506-6dbc21dcda01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scare"",
                    ""type"": ""Button"",
                    ""id"": ""e6aa7d19-0319-49ee-b9e7-572f849be89b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Create"",
                    ""type"": ""Button"",
                    ""id"": ""e2b23358-295d-42d8-a36c-3da8de285dc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom "",
                    ""type"": ""Value"",
                    ""id"": ""0e48472f-b86e-464d-a57d-85eb02d9ce4e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7547b342-09fe-4758-8fc2-4b23b12fabec"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Desktop Control Scheme"",
                    ""action"": ""Sleep"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd5b41b3-441e-4570-8c98-0c71e3c6ec9b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop Control Scheme"",
                    ""action"": ""Interact Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""952a0dbb-e648-4f49-a056-68a95111ac11"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Desktop Control Scheme"",
                    ""action"": ""Observe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a8ee03e-247c-4499-9aa7-c1d11db54b7a"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop Control Scheme"",
                    ""action"": ""Create"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""228757d0-cb21-4bb9-b2f2-658fe11c776f"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop Control Scheme"",
                    ""action"": ""Zoom "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""1faf747e-d09a-4e90-86b1-e94d7c9def3f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""762f57db-9140-4d0c-bbe5-49cf4cf377e1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop Control Scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cecc98dd-64fb-485a-af20-52381531a1b0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop Control Scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""99157616-9cbf-4ff2-956d-a27af9687197"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop Control Scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cc29d499-9f72-4caf-a717-63202d461a37"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop Control Scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""1bba3533-b0d0-457a-b876-37cf89714cda"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b01a991b-82c2-4dcc-a4ae-6e34cf7a2d18"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop Control Scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""70972769-2f37-41d5-98bc-dee39cb8e638"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop Control Scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1764561e-06c5-4ff6-84cd-3a079476a8e6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop Control Scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""befb9186-65b3-4d00-a981-4c2fdd990df0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop Control Scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""678076b5-a112-496f-9e5a-87af2fc69d9e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Admin"",
            ""id"": ""225862a8-07d0-4bee-99c3-46a9e918034b"",
            ""actions"": [
                {
                    ""name"": ""Left Click"",
                    ""type"": ""Button"",
                    ""id"": ""eeabc2d9-ad43-42b9-b445-22df850d94a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Click"",
                    ""type"": ""Button"",
                    ""id"": ""556b02c9-b897-43b1-b1fd-6e99252ba00a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2954c72d-5012-43ea-9f51-5e7f11170674"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2b01dfb-c58a-487d-bc25-a63ade2bbfb3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop Control Scheme"",
            ""bindingGroup"": ""Desktop Control Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Sleep = m_Player.FindAction("Sleep", throwIfNotFound: true);
        m_Player_InteractAction = m_Player.FindAction("Interact Action", throwIfNotFound: true);
        m_Player_Observe = m_Player.FindAction("Observe", throwIfNotFound: true);
        m_Player_Scare = m_Player.FindAction("Scare", throwIfNotFound: true);
        m_Player_Create = m_Player.FindAction("Create", throwIfNotFound: true);
        m_Player_Zoom = m_Player.FindAction("Zoom ", throwIfNotFound: true);
        // Admin
        m_Admin = asset.FindActionMap("Admin", throwIfNotFound: true);
        m_Admin_LeftClick = m_Admin.FindAction("Left Click", throwIfNotFound: true);
        m_Admin_RightClick = m_Admin.FindAction("Right Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Sleep;
    private readonly InputAction m_Player_InteractAction;
    private readonly InputAction m_Player_Observe;
    private readonly InputAction m_Player_Scare;
    private readonly InputAction m_Player_Create;
    private readonly InputAction m_Player_Zoom;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Sleep => m_Wrapper.m_Player_Sleep;
        public InputAction @InteractAction => m_Wrapper.m_Player_InteractAction;
        public InputAction @Observe => m_Wrapper.m_Player_Observe;
        public InputAction @Scare => m_Wrapper.m_Player_Scare;
        public InputAction @Create => m_Wrapper.m_Player_Create;
        public InputAction @Zoom => m_Wrapper.m_Player_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Sleep.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSleep;
                @Sleep.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSleep;
                @Sleep.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSleep;
                @InteractAction.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractAction;
                @InteractAction.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractAction;
                @InteractAction.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractAction;
                @Observe.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnObserve;
                @Observe.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnObserve;
                @Observe.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnObserve;
                @Scare.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScare;
                @Scare.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScare;
                @Scare.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScare;
                @Create.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCreate;
                @Create.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCreate;
                @Create.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCreate;
                @Zoom.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZoom;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Sleep.started += instance.OnSleep;
                @Sleep.performed += instance.OnSleep;
                @Sleep.canceled += instance.OnSleep;
                @InteractAction.started += instance.OnInteractAction;
                @InteractAction.performed += instance.OnInteractAction;
                @InteractAction.canceled += instance.OnInteractAction;
                @Observe.started += instance.OnObserve;
                @Observe.performed += instance.OnObserve;
                @Observe.canceled += instance.OnObserve;
                @Scare.started += instance.OnScare;
                @Scare.performed += instance.OnScare;
                @Scare.canceled += instance.OnScare;
                @Create.started += instance.OnCreate;
                @Create.performed += instance.OnCreate;
                @Create.canceled += instance.OnCreate;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Admin
    private readonly InputActionMap m_Admin;
    private IAdminActions m_AdminActionsCallbackInterface;
    private readonly InputAction m_Admin_LeftClick;
    private readonly InputAction m_Admin_RightClick;
    public struct AdminActions
    {
        private @PlayerControls m_Wrapper;
        public AdminActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_Admin_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_Admin_RightClick;
        public InputActionMap Get() { return m_Wrapper.m_Admin; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AdminActions set) { return set.Get(); }
        public void SetCallbacks(IAdminActions instance)
        {
            if (m_Wrapper.m_AdminActionsCallbackInterface != null)
            {
                @LeftClick.started -= m_Wrapper.m_AdminActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_AdminActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_AdminActionsCallbackInterface.OnLeftClick;
                @RightClick.started -= m_Wrapper.m_AdminActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_AdminActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_AdminActionsCallbackInterface.OnRightClick;
            }
            m_Wrapper.m_AdminActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
            }
        }
    }
    public AdminActions @Admin => new AdminActions(this);
    private int m_DesktopControlSchemeSchemeIndex = -1;
    public InputControlScheme DesktopControlSchemeScheme
    {
        get
        {
            if (m_DesktopControlSchemeSchemeIndex == -1) m_DesktopControlSchemeSchemeIndex = asset.FindControlSchemeIndex("Desktop Control Scheme");
            return asset.controlSchemes[m_DesktopControlSchemeSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSleep(InputAction.CallbackContext context);
        void OnInteractAction(InputAction.CallbackContext context);
        void OnObserve(InputAction.CallbackContext context);
        void OnScare(InputAction.CallbackContext context);
        void OnCreate(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface IAdminActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
    }
}
